package com.mirzoev.kontrolnaya.controllers;

import com.mirzoev.kontrolnaya.models.Film;
import com.mirzoev.kontrolnaya.repositories.FilmRep;
import com.mirzoev.kontrolnaya.services.FilmServisec;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

@RestController
@RequestMapping("/film")
public class FilmController {

    @Autowired
    private FilmServisec filmServisec;

    @GetMapping("")
    public List<Film> getAllFilm() {
        return filmServisec.getAllFilm();
    }

    @GetMapping("/{id}")
    public ResponseEntity<Film> getFilmById(@PathVariable Long id) {
        try{
            Film film = film.getFilmById(id);
            return new ResponseEntity<Film>(film, HttpStatus.OK);
        } catch (NoSuchElementException e){
            return new ResponseEntity<Film>(HttpStatus.NOT_FOUND);
        }
    }

    @PostMapping("/")
    public void addFilm(@RequestBody Film film){
        film.saveFilm(film);
    }
    @PutMapping("/{id}")
    public ResponseEntity<?> updateFilm(@RequestBody Film film, @PathVariable Long id){
        try{
            Film baseFilm = film.getFilmById(id);
            baseFilm.updateFilm(film);
            film.saveFilm(baseFilm);
            return new ResponseEntity<>(HttpStatus.OK);
        } catch (NoSuchElementException e){
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }
    @DeleteMapping("/{id}")
    public void deleteFilm(@PathVariable Long id){
        film.deleteFilm(id);
    }
}